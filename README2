################################
##Readme
################################

Author: Azriel Fasten
Contact me for any issues or licensing I may have overlooked at "fst911@gmail.com".



Project Description Allows GCC/Mingw32 to use wine's stack-trace library
dbghelp.dll ( since wine's dbghelp understands GCC's dwarf2 ).

Thanks to:
  Wine
    For dbghelp.dll implementation with dwarf2 support
    Website: "http://www.winehq.org/"
    Author: See AUTHORS file in Wine's source

  "DBG_Stack_Trace"
    For stacktrace functions, used in test cases.
    Website: "http://www.mr-edd.co.uk/?p=66"
    Author: Edd Dawson

  "regex" and Win32 port of it. ( From FreeBSD ).
    For regex required by Wine'2 dbghelp.dll.
    Author: "Henry Spencer"
    Website: "http://people.delphiforums.com/gjc/hs_regex.html"

  "Wu Yongwei"
    For his informative web page at "http://www.willus.com/mingw/yongweiwu_stdcall.html",
      "http://www.geocities.com/yongweiwu/stdcall.htm"

License:
  WINE and any files from its source are licensed under the "GNU Lesser
    General Public License as published by the Free Software Foundation;
    either version 2.1 of the License, or (at your option) any later
    version."
    For full license see COPYING.LIB in Wine's source or see: "http://www.winehq.org/site/license".
    "bin/widl.exe" a Wine binary.


  "DBG_Stack_Trace" is licensed under the boost software license
    ( "http://www.boost.org/LICENSE_1_0.txt" ). ( See website at "http://www.mr-edd.co.uk/?p=66" ).

  "regex"
    BSD license, see copyright.txt in regex source ( src/regex/copyright.txt )

  The rest of the project:
    The modified "DBG_Stack_Trace" files are under the boost software
    license, and so are any remaining files that are not from Wine, nor from
    regex. This is not a licensing problem, as they not depend on Wine, as
    they can use the Windows dbghelp.dll. The generated Dlls and widl.exe is under
    the sames license as Wine ( LGPL ).



Summary of what was done:
  Downloads:
    Win32 port of regex: "http://people.delphiforums.com/gjc/hs_regex.html"
    Wine: "http://www.winehq.org/site/download"
    Wine ( latest source package as of this time ):
      "http://downloads.sourceforge.net/wine/wine-1.1.9.tar.bz2"
    Wine-progs ( latest build as of this time ):
      "http://downloads.sourceforge.net/wine/wine-prgs-0.9.14.zip"
    "DBG_Stack_Trace":
      "http://www.mr-edd.co.uk/?p=66"
  Links/References:
    def file manipulation:
      "http://www.willus.com/mingw/yongweiwu_stdcall.html"
    In depth examination of flags to use for MSVC to generate debug info:
      "http://www.debuginfo.com/articles/gendebuginfo.html"
  Summary:
    dbghelp.dll contains useful code to trace the function stack, and decode
    the function address to symbol names. However, decoding the function
    addresses to symbol names requires a PDB debugging format which is only
    generated by MSVC. GCC generates dwarf2 debugging information and no
    PDB file exists, thus retrieving the symbol name is impossible with
    Microsoft's dbghelp.dll. What this project aims to do is to compile
    Wine's version of dbghelp.dll on windows. This would be a drop-in
    replacement for Microsoft's dbghelp.dll, and since it supports dwarf2,
    would allow stack traces using GCC/MinGW.

    imagehlp.dll is a dll similar to dbghelp.dll and basically forwards all
    functions to dbghelp.dll

    *:  Wine sources are downloaded ( getwine target )
    *:  Header files are generated from wine's *.idl files ( genheaders target )
    *:  All of the implementation files of dbghelp are compiled ( dbghelp target )
    *:  Any other implementation files that contain functionality that Wine depends on are compiled ( in Makefile.common.in )
    *:  def files are generated for dbghelp and imagehlp either by:
          *:  using winebuild ( part of wine-progs package, see Downloads )to convert Wine's .spec files
          *:  using pexports on the real DLLs
        This is already done, and the .def files are supplied by the project.
    *:  For MSVC, there is no provided ntdll.lib ( dbghelp links in to
          ntdll.dll, MinGW provides a .a import library ), therefore it must be
          generated
    *:  All resulting objects are linked and exported using the .def file containing the export symbols
    *:  imagehlp is a linked def file that simply forwards all functions to dbghelp
  Notes:
  Changes in Wine ( modified source code files supplied by this project ):
    changed dlls/dbghelp/stack.c
      At Line ~204, there was a call made to NtQueryInformationThread(). This
      returned STATUS_SUCCESS even though it wasn't ( I didn't get the correct
      symbol names ). So I disabled the call and made believe it returned
      failure, and Wine handled that better.
    libs/wine/string.c
      WINE_UNICODE_INLINE is defined as "inline", but this causes undefined
      references when compiling it separately as an object.

Explanation of source tree:
  src/dbghelp.def
    this is the definition of symbol exports for dbghelp.dll.
  src/imagehlp.def
    this is the definition of symbol exports for imagehlp.dll.
  src/kludge.c
    this was a source file for functions that Wine didn't implement well for
    windows, those functions were fixed in later versions of Wine.
  src/dlls/
    source files from Wine's dlls/ folder, that needed to be edited to work on Windows.
  src/libs/
    source files from Wine's dlls/ folder, that needed to be edited to work on Windows.
  include/mingw/
    config files for wine for MinGW.
  include/msvc/
    config files for wine for MSVC.
  src/regex/
    source for Win32 port of Henry Spencer's regex library, used by Wine's dbghelp.dll.
  include/regex/
    header files for regex from Win32 port of Henry Spencer's regex library.
  src/stacktrace
    source files for test cases to show Wine's dbghelp.dll works for
    gcc/mingw32. Originally from Edd Dawson's "DBG_Stack_Trace" (
    "http://www.mr-edd.co.uk/?p=66" ), modified as necessary to demonstrate
    its use.
  include/stacktrace
    header files for Edd Dawson's "DBG_Stack_Trace", modified as necessary to
    demonstrate its use.
  bin/widl.exe
    widl is a tool used by the Wine project to create header files from
    *.idl ( Interface description language ) files. Some of Wine's headers
    are in *.idl format. It is available from wine-progs, see Downloads.
  docs/
    Documentation I found useful to completing this project



Prerequisites:
  The following programs should be in the path ( or have their locations specified when calling make ):
    cp, rm, tar, bunzip2, mv, wget, touch ( basically unix utilities, most
    of it comes with MSYS, or maybe even just MinGW )

    For dbghelp: C compiler , For "DBG_Stack_Trace" and demonstration: a C++ compiler ( GCC, MSVC ).

    In the "bin/" folder:
      widl ( included )
  regex library ( henry spencer regex source included ).
  For targets that generate certain source files ( already generated ), such as target "sgenimports":
    in "bin/": pexports, winebuild, in path: sed.
Recommended:
  MSYS
Tested with:
  WinXP

Notes:
Wine's dbghelp.dll ( as of version 0.9 ) cannot decipher PDB 7
(>=vc2005), haven't tested it with older PDB's.

mingw32-make is used for the makefiles.

MSVC default parameters will be setup if make is run with COMPILER=MSVC.
If dbghelp.test.run target is used with COMPILER=MSVC, then havoc will
result, as wine's dbghelp will have many many parse errors ( after
reporting an unknown PDB version ).


Henry Spencer REGEX is used for regex required by dbghelp.dll. Licensing is included in its folder ( "src/regex/" )

Automatic dependency doesn't work for MSVC.

Some objects have automatic dependency generation, some don't.

I was only able to get it to work with run-time loading of imagehlp's
symbols ( undefined references in linkage resulted when linking with the
its import library ).

Tested with wine-1.1.9

Targets you should know about:

  all                 All of the following targets: dbghelp imagehlp stack stack.test
                      imagehlp.test dbghelp.test.
  dbghelp             This will build dbghelp.dll.
  imagehlp            This will build imagehlp.dll. imagehlp.dll forwards most calls to
                      dbghelp.dll.
  stack               Edd Dawson's stacktrace.
  stack.test          Edd Dawson's example.
  stack.test.run      Runs the example and describes the expected output.
  imagehlp.test       Sets up a test of imagehlp ( if it forwards the functions ).
  imagehlp.test.run   Runs the test of imagehlp.
  dbghelp.test        Sets up a test of dbghelp.
  dbghelp.test.run    Runs the test of dbghelp.
  clean               Cleans all ( except getwine target ).
  emergency.clean     Cleans OUTLIBPATH, OUTBINPATH, and OBJPATH, including getwine target and
                      every configuration string. This is for when the dependency generation
                      is corrupted and ruins the makefiles. You can just cd to the build dir
                      and type "make -f Makefile.clean clean.emergency".
  getwine             Retrieves the wine sources from SF.net.
                      Note that normal clean target does not include the source
                      retrieved with getwine. Wine is downloaded to the the WINEPATH directory.
  getwine.clean       Removes the wine sources downloaded and unpacked with getwine.

The makefile is executed in directory build, and therefor all paths are relative to "build/"

Variables you should know about:

  WINEPATH          The path to wine's main source directory ( dlls, include, tools,
                    etc. as subdirectory ).
                    defaults to: none, ( REQUIRED, unless using together with getwine
                    target, in which case it is $(OBJPATH)/winesrc/wine/ ).
  WINEINCLUDEPATH   The path to wine's include directory.
                    defaults to: "$(WINEPATH)/include/".

  WINE_URL          The url to the tar.bz2 for the getwine target to download wine to
                    defaults to "http://downloads.sourceforge.net/wine/wine-1.1.9.tar.bz2"
  WINE_SUBFOLDER_NAME
                    The name of the folder that contains wine inside the tar.bz2
                    defaults to wine-1.1.9

  COMPILER          The compiler to use, either GCC or MSVC. Sets many default variables.
                    defaults to GCC
  SHELL_PLATFORM    The shell that is being used. WIN32 for windows shell, UNIX for Unix-like shells.
                    Sets comment strings and certain commands.
                    defaults to UNIX ( since many tools are missing by default from windows shell anyway )
  PLATFORM          The platform that is running. WIN32 for windows, UNIX for unix-like.
                    Sets the default extensions for binaries and such.
                    defaults to WIN32

  SRCPATH           The path to this projects source.
                    defaults to: "../src/".
  INCLUDEPATH       The path to this projects include directory.
                    defaults to: "../src/".
  LIBPATH           The path to this projects library directory.
                    defaults to: "../lib/".
  CONFSTR           Configuration name (eg. "GCC_RELEASE", "MSVC_RELEASE", etc. ).
                    defaults to: "GCC_RELEASE" for gcc and "MSVC_RELEASE" for MSVC.
  BUILDPATH         The default directory to place the output directories ( used for the
                    defaults of OBJPATH, OUTLIBPATH, and OUTBINPATH
                    defaults to: "./"
  OBJPATH           The location to store temporary objects.
                    defaults to: "$(BUILDPATH)/objs/$(CONFSTR)/".
  OUTLIBPATH        The location to put produced libraries into.
                    defaults to: "$(BUILDPATH)/lib/dbghelp/$(CONFSTR)/".
  OUTBINPATH        The location to put produced binaries into.
                    defaults to: "$(BUILDPATH)/bin/dbghelp/$(CONFSTR)/".
  WIDL              The location of wine's widl.exe ( comes with wine-progs ). ( This is
                    used to generate header files from idl files ).
                    defaults to: "../bin/widl".
  CPP_DEBUG_FLAGS   The flags to enable debugging for the stacktrace test example.
                    For gcc 3.4.5 -g3 works because wine understands dwarf2, but for
                    newer versions of GCC -gstabs is needed ( -gdwarf-2 didn't seem to work )
                    defaults to: "-g3" for gcc and "/debug /OPT:REF /OPT:ICF /debugtype:cv" for msvc.
                    For msvc, the debug flag options are explained in docs/gendebuginfo.html,
                    also found at "http://www.debuginfo.com/articles/gendebuginfo.html"
  WGET              The path to wget, used for target getwine.
                    defaults to: "wget"
  TAR               The path to tar, used for target getwine.
                    defaults to: "tar"
  BUNZIP2           The path to bunzip2, used for target getwine.
                    defaults to: "bunzip2"
  MKDIR             The path to unix style "mkdir -p"
                    default depends on SHELL setting
  CP                The path unix style "cp"
                    defaults to "cp"

Examples:

##Using MSYS, get wine, compile dbghelp.dll with MSVC and run dbghelp.test
##Note that cl etc. must be in path, so you might want to run
##vcvars32.bat file found in the MSVC folder ( usualy "\Program
##Files\Microsoft Visual Studio 9.0\VC\bin" )
make SHELL_PLATFORM=WIN32 COMPILER=MSVC getwine dbghelp.test.run

##Using Windows shell, get the wine sources and build, run dbghelp.test
make SHELL_PLATFORM=WIN32 getwine dbghelp.test.run

##Using MSYS, get the wine sources and build, run dbghelp.test
make getwine dbghelp.test.run

##Using MSYS, make and run stack.test using existing Wine source
make WINEPATH=C:\super\dump\wine\wine-HEAD\wine\ stack.test.run

##Using MSYS, make and run imagehlp.test using existing Wine source
make WINEPATH=C:\super\dump\wine\wine-HEAD\wine\ imagehlp.test.run

##Using MSYS, make and run dbghelp.test using existing Wine source
make WINEPATH=C:\super\dump\wine\wine-HEAD\wine\ dbghelp.test.run

##Clean the MSVC configured build
make WINEPATH=C:\super\dump\wine\wine-HEAD\wine\ COMPILER=MSVC clean





##Emergency clean ( The makefile includes dependancy generation,
## and if an error occurs durring dependacy generation run the following ).
## Note that it will delete the output directories ( OBJPATH, OUTBINPATH,
## OUTLIBPATH ) and all they contain, ( including GCC/MSVC configurations,
## and Wine's source if downloaded to the default location )
cd build
make -f Makefile.clean clean.emergency

################################
